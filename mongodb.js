// CRUD - Create Read Update Delete

// const mongodb = require('mongodb')
// const MongoClient = mongodb.MongoClient
// // its gonna give us the function necessary to connect 
// // to the db so that we can perform the basic crud operations 
// const ObjectID = mongodb.ObjectID

// we can destructure the above 
const { MongoClient, ObjectID } = require('mongodb')

const connectionURL = 'mongodb://127.0.0.1:27017'
const databaseName = 'task-manager'
const id = new ObjectID()
console.log(id) // in string 
console.log(id.getTimestamp())

console.log(id.id) // in binary
console.log(id.id.length) // 12

console.log(id.toHexString()) // in string
console.log(id.toHexString().length) // 24

MongoClient.connect(connectionURL, { useNewUrlParser: true }, (error, client) => {
    if(error) {
        return console.log('Unable to connect to d/b')
    }
    console.log('Conected successfully !')

    // manipulating the name of the DB
    const db = client.db(databaseName)

    // // creating a new connection.. and insert one document 
    // db.collection('users').insertOne({
    //     name: 'Anirup with ID',
    //     age: 28,
    //     _id: id // we dont need to add this _id as its an extra code
    //     // and let mongoDB do that piece 
    // }, (error, result) => {
    //     if(error) {
    //         return console.log('Unable to insert user')
    //     }

    //     console.log(result.ops)
    // })

    // -------new set of code----------

    // db.collection('users').insertMany([
    //     {
    //         name: 'Sharan',
    //         age: 28
    //     },
    //     {
    //         name: 'Sangram',
    //         age: 27
    //     }
    // ], (error, result) => {
    //     if(error) {
    //         return console.log('Unable to insert to user')
    //     }

    //     console.log(result.ops)
    // })

    // ------- new set of code----------

    // Insert 3 tasks into a new tasks collection
    // Use insertMany to insert three documents
    // description(string), completed(boolean)
    // Set up the callback to handle the error

    // db.collection('tasks').insertMany([
    //     {
    //         description: 'Excercise',
    //         completed: true
    //     },
    //     {
    //         description: 'Enterpreunal Work',
    //         completed: true
    //     },
    //     {
    //         description: 'Nodejs Tutorial',
    //         completed: false
    //     }
    // ], (error, result) => {
    //     if(error) {
    //         return console.log('Unable to write to task collection !')
    //     }

    //     console.log(result.ops)
    // })

    // ------- new set of code----------


})

// After running this open Robo 3T and refresh it to find a new 
// DB named task-manager and open collection and
// right click on users and select view documents 

// In SQL, the Ids that are generated by the servers and follow an incremental 
// integar pattern
// like 1,2,3.... 
// but in MongoDB, the Ids are known as GUID (Globally Unique Inentifiers)
// they are designed to be unique using an algorithm whitout needing 
// the server to determine whats the next id is to be 
// which allows to scale well in a distributed system
// servers doesnt generate ID, but we use mongoDB library to generate the GUIDs
// with mongoDB and GUIDs, there is no chance of ID collision with multiple
// DB servers

// How object IDs are stored
// in Binary format 
// we can check with console.log(new ObjectID().id)
// the length is 12 
// we can convert it into string 
// new ObjectID().toHexString()
// the length is 24
